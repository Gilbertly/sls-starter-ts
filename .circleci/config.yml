version: 2
orbs:
  codecov: codecov/codecov@1.0.5
  aws-ecr: circleci/aws-ecr@6.15.2
refs:
  container_config: &container_config
    docker:
      - image: circleci/node:12
    working_directory: ~/app
  steps:
    - &install_dependencies
      run:
        name: Install Dependencies
        command: |
          npm install
    - &save_cache
      save_cache:
        paths:
          - node_modules
        key: v1-dependencies-{{ checksum "package.json" }}
    - &restore_cache
      restore_cache:
        keys:
          - v1-dependencies-{{ checksum "package.json" }}
          - v1-dependencies-
    - &persist_workspace
      persist_to_workspace:
        root: ./
        paths:
          - ./
    - &attach_workspace
      attach_workspace:
        at: ~/app
    - &test_build
      run:
        name: Run Tests, Audit Fix, & Build
        command: npm run validate:all
    - &sls_configure
      run:
        name: Configure Serverless AWS Credentials
        command: |
          ./node_modules/.bin/sls config credentials \
          --provider aws \
          --key ${ACCESS_KEY} \
          --secret ${SECRET_KEY}
    - &sentry_release
      run:
        name: Sentry Release
        command: |
          export SENTRY_AUTH_TOKEN=${SENTRY_AUTH_TOKEN}
          export SENTRY_ORG=${SENTRY_ORG}
          VERSION=$(git rev-parse --short HEAD)
          ./node_modules/.bin/sentry-cli releases new -p ${SENTRY_PROJECT} $VERSION
          ./node_modules/.bin/sentry-cli releases set-commits --auto $VERSION
    - &semantic_release
      run:
        name: Semantic Release
        command: |
          export GH_TOKEN=${GH_TOKEN}
          npx semantic-release
    - &upload_coverage
      run:
        name: Upload Tests' Coverage
        codecov/upload:
          conf: ./codecov.yml
          token: ${CODECOV_TOKEN}
    - &build_push_ecr
      aws-ecr/build-and-push-image:
        aws-access-key-id: ${AWS_ACCESS_KEY}
        aws-secret-access-key: ${AWS_SECRET_KEY}
        account-url: ${AWS_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com
        region: ${AWS_REGION}
        repo: ${AWS_ECR_REPO_NAME}
        tag: 'latest,${CIRCLE_SHA1}'
        path: ./Dockerfile

jobs:
  build:
    <<: *container_config
    steps:
      - checkout
      - *install_dependencies
      - *save_cache
      - *restore_cache
      - *persist_workspace

  deploy_dev:
    <<: *container_config
    steps:
      - *attach_workspace
      - *sls_configure
      - *build_push_ecr
      - run:
          name: Deploy to Dev
          command: npm run deploy:dev
      - *semantic_release

  deploy_prod:
    <<: *container_config
    steps:
      - *attach_workspace
      - *sls_configure
      - *build_push_ecr
      - run:
          name: Deploy to Prod
          command: npm run deploy:prod
      - *semantic_release

workflows:
  version: 2
  build_deploy:
    jobs:
      - build
      - deploy_dev:
          filters:
            branches:
              only:
                - develop
          requires:
            - build
          context: sls-starter-ts-dev
      - deploy_prod:
          filters:
            branches:
              only:
                - master
          requires:
            - build
          context: sls-starter-ts-prod
